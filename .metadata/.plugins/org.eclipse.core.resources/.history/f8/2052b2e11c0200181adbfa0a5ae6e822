package com.zohar.cohen.array.structure;

public class ArrayStructure {

	private int[] theArray = new int[50];
	private int arraySize = 10;

	public void generateRandomArray() {

		for (int i = 0; i < arraySize; i++) {
			// create random numbers between 10-19
			theArray[i] = (int) (Math.random() * 10) + 10;
		}
	}

	public void printArray() {

		System.out.println("----------");
		for (int i = 0; i < arraySize; i++) {

			System.out.print("| " + i + " |");
			System.out.println(theArray[i] + " |");
			System.out.println("----------");

		}

	}

	public int getValueAtIndex(int index) {

		if (index < arraySize)
			return theArray[index];
		return 0;
	}

	public boolean doesArrayContainThisValue(int searchValue) {

		boolean valueInArray = false;

		for (int i = 0; i < arraySize; i++) {

			if (theArray[i] == searchValue) {

				valueInArray = true;
			}
		}
		return valueInArray;
	}

	public void deleteIndex(int index) {

		if (index < arraySize) {

			for (int i = index; i < (arraySize - 1); i++) {

				theArray[i] = theArray[i + 1];
			}
			arraySize--;
		}

	}

	public void insertValue(int value) {

		if (arraySize < 50) {

			theArray[arraySize] = value;
			arraySize++;
		}

	}

	/**
	 * Liner search to find all the matches in the array in case there are only one
	 * instance for a value it is better to use binary search
	 **/
	public String linerSearchForValue(int value) {

		boolean valueInArray = false;
		String indexsWithValue = "";
		System.out.print("The Value was Found in the Following Indexes: ");

		for (int i = 0; i < arraySize; i++) {

			if (theArray[i] == value) {

				valueInArray = true;
				System.out.println(i + " ");
				indexsWithValue += i + " ";

			}
		}
		if (!valueInArray) {

			indexsWithValue = "None";
			System.out.print(indexsWithValue);
		}

		System.out.println();
		return indexsWithValue;
	}

	/**
	 * Algorithm: scan through the array if two adjustment items are out of order
	 * swap them. if you finish a scan without a swap you're done.
	 **/
	public void bubbleSort() {

		for (int i = arraySize - 1; i > 1; i--) {

			for (int j = 0; j < i; j++) {

				if (theArray[j] > theArray[j + 1]) {
					swapValues(j, j + 1);
					printHorzArray(i, j);

				}
				printHorzArray(i, j);
			}

		}
	}

	public void swapValues(int indexOne, int indexTwo) {
		int temp = theArray[indexOne];
		theArray[indexOne] = theArray[indexTwo];
		theArray[indexTwo] = temp;

	}
	
	public void binarySearchForValue(int value) {
		
	int middleIndex =0;
	int lowIndex = 0;
	int highIndex = arraySize - 1;
	while (lowIndex <= highIndex) {
		
		middleIndex = (lowIndex + highIndex)/2;
		if(theArray[middleIndex] > value)      highIndex = middleIndex -1;
		else if(theArray[middleIndex] < value) lowIndex = middleIndex + 1;
		else {
			
			System.out.println("\nFound a match for value: "+value+" at index: "+middleIndex);
			lowIndex = highIndex + 1;
			printHorzArray(middleIndex, -1);
		}
		
	}
		
		
	}
	
	public void selectionSort() {
		
	   for(int x = 0; x < arraySize ; x++ ) {
		   
		   int min = x;
		   
		   for(int y = x; y<arraySize; y++) {
			   
			   if(theArray[min]>theArray[y]) {
				   
				   min=y;
			   }
		   }
		   swapValues(min, x);
		   printHorzArray(x, -1);
	   }	
		
		
	}
	
	public void insertationSort() {
		
		for (int i = 1; i < arraySize; i++) {
			
			int j=i;
			int toInsert = theArray[i];
			while ((j > 0) && (theArray[j-1] > toInsert)) {
				
				theArray[j-1] = theArray[j];
				j--;
				
			}
			
		}
		
	}
		
	

	public static void main(String[] args) {

		ArrayStructure newArray = new ArrayStructure();
		newArray.generateRandomArray();
	/**	
		newArray.printArray();
		System.out.println(newArray.getValueAtIndex(3));
		System.out.println(newArray.doesArrayContainThisValue(18));
		newArray.deleteIndex(4);
		newArray.printArray();
		newArray.insertValue(55);
		newArray.printArray();
		newArray.linerSearchForValue(17);
   **/
		
	//	newArray.bubbleSort();
	//	newArray.binarySearchForValue(11);
		newArray.selectionSort();
		
	}

	public void printHorzArray(int i, int j) {

		for (int n = 0; n < 51; n++)
			System.out.print("-");

		System.out.println();

		for (int n = 0; n < arraySize; n++) {

			System.out.print("| " + n + "  ");

		}

		System.out.println("|");

		for (int n = 0; n < 51; n++)
			System.out.print("-");

		System.out.println();

		for (int n = 0; n < arraySize; n++) {

			System.out.print("| " + theArray[n] + " ");

		}

		System.out.println("|");

		for (int n = 0; n < 51; n++)
			System.out.print("-");

		System.out.println();

		// END OF FIRST PART

		// ADDED FOR BUBBLE SORT

		if (j != -1) {

			// ADD THE +2 TO FIX SPACING

			for (int k = 0; k < ((j * 5) + 2); k++)
				System.out.print(" ");

			System.out.print(j);

		}

		// THEN ADD THIS CODE

		if (i != -1) {

			// ADD THE -1 TO FIX SPACING

			for (int l = 0; l < (5 * (i - j) - 1); l++)
				System.out.print(" ");

			System.out.print(i);

		}

		System.out.println();

	}

}
